//
// Define a set of common settings for all projects, and include
// all the 2.11 projects. The included file also contains a large set of
// vars definitions, which are used later in this file as well.
//

vars: {
  scala-version: ""
  scala-version: ${?version}
}

vars.base: {
}
include file("common.conf")

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}

  space: scala

  projects: [{

    name:  "scala"
    system: assemble
    cross-version: binary
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
        extra.sources: true  // Scala.js wants this
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      {
        name: "scala-xml"
        // master has moved to a new 2.x series, but the Scala 2.12 compiler
        // is going to continue depending on 1.x, in fact Scala 2.12 will
        // probably stay frozen at 1.0.6 forever. but the v1.0.6 tag won't
        // build on JDK 11, so let's use the 1.x branch
        uri: "https://github.com/scala/scala-xml.git#1.x"
        // this gives us "scala-xml_2.11" which is what we want, sbt 1 will get
        // upset if there are two different kinds of scala-xml dependencies
        // floating around (https://github.com/scala/community-builds/issues/679)
        cross-version: standard
        // override sbt version here since otherwise we get
        // whatever random sbt version the module has
        extra.sbt-version: 0.13.18
        extra.commands: ${vars.default-commands} [
          // override scalaVersion here since otherwise we get
          // whatever random Scala version the module has
          "set scalaVersion := \""${vars.scala-version}"\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xml"]
      }
    ]
  }

]}

//  ${vars.base} {
//    name: "scala-partest"
//    uri: "https://github.com/"${vars.scala-partest-ref}
//  }

//  ${vars.base} {
//    name: "scala-swing"
//    uri: "https://github.com/"${vars.scala-swing-ref}
//    extra.commands: ${vars.default-commands} [
//      // work around https://github.com/scala/community-builds/issues/575
//      // (in a community build context, we don't need MiMa to run)
//      "set every ScalaModulePlugin.mimaPreviousVersion := None"
//    ]
//  }
